/*
 * MIT License
 *
 * Copyright (c) 2016 Dries007 & DoubleDoorDevelopment
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

group = "net.doubledoordev"
archivesBaseName = "InventoryLock"
version = "1.0.0"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

targetCompatibility = 1.7
sourceCompatibility = 1.7

minecraft {
    version = "1.10.2-12.18.2.2099"
    runDir = "run"
    mappings = "snapshot_20161013"
}

repositories {
    mavenCentral()
}

dependencies {
}

jar {
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.doubledoordev.inventorylock.asm.Plugin'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    doLast {
        def updateFile = new File(project.archivesBaseName + '.json')
        def json;
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        }
        else {
            def builder = new JsonBuilder()
            json = builder(
                    homepage: "http://doubledoordev.net/",
                    promos: new HashMap<>()
            )
        }
        def outStream = new ByteArrayOutputStream()
        def result = exec {
            executable = 'git'
            args = [ 'log', '-n', '1', "--format='%B'"]
            standardOutput = outStream
        }
        def fullLog = outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")

        json['promos'][project.minecraft.version + '-latest'] = project.version
        json['promos'][project.minecraft.version + '-recomended'] = project.version
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        def version = json[project.minecraft.version]
        version.put(project.version, fullLog)
        updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
    }
}
task deobfJar(type: Jar, dependsOn: 'jar') {
    from "LICENSE"
    from sourceSets.main.output
    classifier "dev"
    appendix = project.minecraft.version
}
sourceJar {
    from "LICENSE"
    exclude("com/**")
    classifier "src"
    appendix = project.minecraft.version
}
jar {
    from "LICENSE"
    exclude("com/**")
    appendix = project.minecraft.version
}
artifacts {
    archives deobfJar
}
